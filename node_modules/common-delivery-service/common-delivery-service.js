// Общая библиотека Delivery
/* SQL Queries */
const SQL = {
  USER: {
    GET_DELIVERY_TYPES : `select          
         "code" as code,
         "name" as name,
         "description" as description,
         "logo_class" as logo         
        from pa_delivery_service.delivery_type where blocked_at is null`,
    ADD_ADDRESS : `
    INSERT INTO pa_delivery_service.delivery_addresses (
    fias_id, fias_level, value, city, country, flat, house, postal_code, region, street, user_id, delivery_type) VALUES ( $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)
    RETURNING address_id`,
    DELETE_ADDRESS : `
    UPDATE pa_delivery_service.delivery_addresses 
    SET deleted_at = now() 
    where user_id=$1 and address_id=$2`,
    GET_ADDRESSES_WIHTH_QUERY  : `select * from pa_delivery_service.delivery_addresses where user_id=$1 and deleted_at is null and delivery_type=$2`,    
    GET_ADDRESSES  : `select * from pa_delivery_service.delivery_addresses where user_id=$1 and deleted_at is null and delivery_type is null `,    
    SET_ADDRESSES  : `
      UPDATE pa_delivery_service.delivery_addresses 
       SET "is_default" = CASE WHEN "address_id" = $1 THEN true ELSE false END
       WHERE "user_id" = $2  and "deleted_at" is null
      RETURNING "address_id"`
  },
  DELIVERY: {
    FIND_COURIER_BY_TIME_SLOT: `SELECT * FROM pa_delivery_service.delivery_couriers WHERE delivery_type_id = $1 AND time_slot_id = $2 `,
    FIND_COURIER_BY_ID :  `SELECT * FROM pa_delivery_service.delivery_couriers WHERE courier_id = $1 `,    
    GET_COURIER_ORDER_COUNT:  `SELECT count(id) FROM pa_delivery_service.delivery WHERE delivery_date = $1 and courier_id = $2 `,
    FIND_COURIER : `
SELECT 
    dc.courier_id,
    dc.courier_name,
    dc.max_count,
    COUNT(d.id) AS current_orders
FROM 
    pa_delivery_service.delivery_couriers dc
LEFT JOIN 
    pa_delivery_service.delivery d
ON 
    dc.courier_id = d.courier_id
    AND d.delivery_date = $1 
LEFT JOIN 
    pa_delivery_service.delivery_type dt
ON 
    dt.id = dc.delivery_type_id    
WHERE 
    dt.code = $2 
    AND dc.blocked_at IS NULL 
    AND dc.deleted_at IS NULL 
GROUP BY 
    dc.courier_id, dc.courier_name, dc.max_count
HAVING 
    COUNT(d.id) < dc.max_count 
ORDER BY 
    current_orders ASC
 `,
 FIND_DELIVERY_ORDER : `SELECT * FROM pa_delivery_service.delivery WHERE order_id = $1 and courier_id is not null`,
 DELIVERY_ORDER_ADD :    `INSERT INTO pa_delivery_service.delivery (order_id, delivery_date, courier_id)
    VALUES ($1, $2, $3)
      ON CONFLICT (order_id) DO UPDATE
      SET courier_id = EXCLUDED.courier_id
      RETURNING id;`, 
    DECLINE : `UPDATE pa_delivery_service.delivery SET courier_id = null WHERE order_id = $1 `,
    RESERVE_SLOT: `UPDATE pa_delivery_service.delivery SET reserved = 1 WHERE courier_id = $1 AND time_slot = $2`,
    RELEASE_SLOT: `UPDATE pa_delivery_service.delivery SET reserved = 0 WHERE courier_id = $1 AND time_slot = $2`,
  },  
}
const MESSAGES = {
   RU : {    
      INPUT_VALIDATION_ERROR: 'Ошибка проверки входных данных',
      PRODUCT_ID_REQUIRED: 'Ошибка проверки productId',
      PRODUCT_NOT_FOUND: 'Продукт не найден',
      ERROR_FETCHING_MEDIA: 'Ошибка получения медиафалов для продукта',
      ERROR_FETCHING_PRODUCT: 'Ошибка получения продукта',
      ERROR_FETCHING_WAREHOUSE: 'Ошибка при получении информации о состоянии склада',
      RESERVE_ITEM_SUCCESS : 'Резервирование товара выполнено',
      RESERVE_ITEM_FAILED : 'Возникла ошибка при резервирование товара',
      RELEASE_ITEM_SUCCESS : 'Отмена резервирования товара выполнена',   
      RELEASE_ITEM_FAILED :  'Возникла ошибка при отмене резервирования товара',     
      ERROR_REMOVING_PRODUCT_FROM_BASKET : 'Ошибка удаления продукта из корзины',
 
   }
}

/* Экспорт */
module.exports = {
  SQL, MESSAGES
};
